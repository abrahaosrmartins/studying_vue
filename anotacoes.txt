Diário de aula - curso de Vue completo e vuex

Obs.: Acabei não anotando nada antes dessas aulas pq a ideia veio nela.

13 - Cuidado ao utilizar arrow functions dentro do objeto vue. Elas não consideram o this com sendo uma instancia do
Vue, mas sim do Window, ou de uma função, caso esteja definida dentro de uma.
16 - passando o próprio event $event dentro do v-on (@)
17 - praticando
18 - explorando modificadores dos eventos (event.preventDefault())
19 - selecionar elemento filho do id que está sendo instanciado no Vue
20 - v-if v-else-if v-else @blur
21 - v-show, bom pra usar nos tooltips
22 - v-html
23 - v-text
24 - v-once
25 - v-for
26 - v-for parte 2
27 - v-for parte 3 - atributo key (:key)
28 - v-for parte 4
29 - v-for parte 5 push e pop em arrays, modificar valores do meio do array usando $set do Vue.
30 - tag template
31 - propriedades computadas
32 - propriedades computadas parte 2
para saber mais: Objeto literal: https://www.locaweb.com.br/blog/temas/codigo-aberto/objeto-literal-colecao-de-objetos/
filter do javascript, computed
33 - v-model
34 - praticando v-model
Obs.: quando trabalhamos com input dos tipos radio e checkbox, temos que utilizar o atributo name para o javascript
entender qual está selecionado. O v-model, torna isso opcional
35 - propriedade watch
bom exemplo para usar em busca
36 - Iniciando projeto montando lanche
37 - implementando a interface do projeto
38 - usando as propriedades computada para definir as imagens que vão ser usadas
39 - implementando a interface do projeto, parte 2
40 - usando v-model pra alterar o pão do lanche
41 - ainda usando v-model e propriedades computadas
42 - ainda no projeto
43 - ainda no projeto
44 - ainda no projeto (usando o watch nessa aula)
45 - passando objetos no atributo class do html pra modificar reativamente
46 - fazendo a mesma coisa, só que com array ao invés de Objeto
47 - usando v-bind para definir styles com com objetos
Obs.: Objeto literal não suporta traço (-), então quando for passar o nome de uma propriedade, tem que colocar entre
aspas, ou usar camelCase
48 - fazendo a mesma coisa que a 47, só que usando computed
49 - falando do $ref pela primeira vez
Obs.: $ref não é reativo
50 - DOM (Document Object Model, ou Modelo de Documento por Objetos.) e VIRTUAL DOM. Como o vue, e o outros frameworks
usam o VD para atualizar o DOM  e ganhar performance. Se eu entendi bem, o DOM é uma representação orientada a objetos do
documento HTML, (ou XML), ou seja, da página web. Essa representação pega os elementos do documento e transforma em objetos
manipulaveis por uma linguagem de script (javascript, no nosso caso). O VD é uma versão virtual manipulada pelo framework
(Vue, no nosso caso) porque o manipular o DOM real é muito custoso e verboso
51 - Cuidado ao manipular o mesmo elemento pelo DOM e pelo VD. Isso pode gerar inconsistencias. Nessa aula, ele dá
exemplos muito bons disso
52 - usando o vue.$mount pra carregar o template. No persona, isso é usado, mas é um pouco diferente. Será que é pela mudança
de vesão do Vue? nessa aula, o prof ainda usa o 2
53 - usando a propriedade template do objeto Vue para carregar um template.
obs.: não é tão interessante fazer dessa forma, mas foi útil pq aprendi que usar crase ao invés de aspas serve tambem para preservar as quebras de linha
54 - só um recado antes da att para o vue 3
55 - Instalando Vue sem cli.
obs.: aqui que ele fala das mudanças na instanciação do objetov vue, e é assim que é feito la no persona
56 - apenas intro da proxima seção
57 - instalando node e npm no windows
58 - instalando node e npm no linux
59 - instalando node e npm no osx
60 - instalando vue cli
61 - usando vue cli para criar um projeto vue padrão
62 - usando vue cli para criar um projeto vue customizado
63 - Definindo a porta em que a aplicação será servida
64 - Criando projeto vue usando vue ui.
65 - gerenciando o projeto usando o ui
Obs.: Bem legal, essa aula. Prrincipalmente a aba de tarefas, do ui, que mostra as dependencias instaladas e as estatisticas do projeto.
66 - Entendendo a estrutura de pastas do projeto vue.
obs.: tag noscript é utilizada quando o navegador não tem suporte ao javascript, ou esse suporte está desligado
67 - Entendendo a estrutura de pastas do projeto vue. parte 2
obs.: aula boa para entender a melhor a diferença entre o package.json e o package-lock.json
68 - entendendo a diferença entre ~ e ^ na definição da versão de cada pacote no package.json
69 - como reconstruir as dependencias do projeto usando o npm (se precisar excluir o node_modules, por exemplo)
obs.: npm install le o package-lock e faz download das dependencias
70 - instalando git no windows
71 - instalando git no linux
72 - instalando git no osx
73 - diferenciando git, github e bitbucket
74 - configs globais do git
obs.: ensina a começar um repo git localmente
75 - criando conta no bitbucket
76 - conectando repositorio local com o remoto no bitbucket
77 - trabalhando com alterações no git (status, add, reset, commit e log)
78 - git push
79 - git clone
80 - criando conta de usuário no Heroku
81 - criando um app no Heroku
82 - Instalando heroku cli no windows
83 - Instalando heroku cli no linux
84 - Instalando heroku cli no osx
85 - Instalando o Express (Framework backend para o Node)
obs.: tem que criar uma camada backend para servir a aplicação frontend la no heroku. Isso acontece em toda cloud?
86 - Criando um servidor web utilizando node e express.
87 - Servindo o app vue de produção por meio do express. Basicamente fazendo a versão de prod do app
88 - configurando um comandono package.json para iniciar o servidor web
89 - conectando o projeto local ao repositório no heroku
90 - Falando de ci/cd 
obs.: eu posso subir a aplicação diretamente no heriku. Não preciso colocar no github ou bitbucket. Inclusive o Heroku tem
suporte a pipeline de deploy
91 - Fazendo o deploy, de fato, no Heroku (muito legal essa aula)
92 - instalando o Vue Devtools