Diário de aula - curso de Vue completo e vuex

Obs.: Acabei não anotando nada antes dessas aulas pq a ideia veio nela.

13 - Cuidado ao utilizar arrow functions dentro do objeto vue. Elas não consideram o this com sendo uma instancia do
Vue, mas sim do Window, ou de uma função, caso esteja definida dentro de uma.
16 - passando o próprio event $event dentro do v-on (@)
17 - praticando
18 - explorando modificadores dos eventos (event.preventDefault())
19 - selecionar elemento filho do id que está sendo instanciado no Vue
20 - v-if v-else-if v-else @blur
21 - v-show, bom pra usar nos tooltips
22 - v-html
23 - v-text
24 - v-once
25 - v-for
26 - v-for parte 2
27 - v-for parte 3 - atributo key (:key)
28 - v-for parte 4
29 - v-for parte 5 push e pop em arrays, modificar valores do meio do array usando $set do Vue.
30 - tag template
31 - propriedades computadas
32 - propriedades computadas parte 2
para saber mais: Objeto literal: https://www.locaweb.com.br/blog/temas/codigo-aberto/objeto-literal-colecao-de-objetos/
filter do javascript, computed
33 - v-model
34 - praticando v-model
Obs.: quando trabalhamos com input dos tipos radio e checkbox, temos que utilizar o atributo name para o javascript
entender qual está selecionado. O v-model, torna isso opcional
35 - propriedade watch
bom exemplo para usar em busca
36 - Iniciando projeto montando lanche
37 - implementando a interface do projeto
38 - usando as propriedades computada para definir as imagens que vão ser usadas
39 - implementando a interface do projeto, parte 2
40 - usando v-model pra alterar o pão do lanche
41 - ainda usando v-model e propriedades computadas
42 - ainda no projeto
43 - ainda no projeto
44 - ainda no projeto (usando o watch nessa aula)
45 - passando objetos no atributo class do html pra modificar reativamente
46 - fazendo a mesma coisa, só que com array ao invés de Objeto
47 - usando v-bind para definir styles com com objetos
Obs.: Objeto literal não suporta traço (-), então quando for passar o nome de uma propriedade, tem que colocar entre
aspas, ou usar camelCase
48 - fazendo a mesma coisa que a 47, só que usando computed
49 - falando do $ref pela primeira vez
Obs.: $ref não é reativo
50 - DOM (Document Object Model, ou Modelo de Documento por Objetos.) e VIRTUAL DOM. Como o vue, e o outros frameworks
usam o VD para atualizar o DOM  e ganhar performance. Se eu entendi bem, o DOM é uma representação orientada a objetos do
documento HTML, (ou XML), ou seja, da página web. Essa representação pega os elementos do documento e transforma em objetos
manipulaveis por uma linguagem de script (javascript, no nosso caso). O VD é uma versão virtual manipulada pelo framework
(Vue, no nosso caso) porque o manipular o DOM real é muito custoso e verboso
51 - Cuidado ao manipular o mesmo elemento pelo DOM e pelo VD. Isso pode gerar inconsistencias. Nessa aula, ele dá
exemplos muito bons disso
52 - usando o vue.$mount pra carregar o template. No persona, isso é usado, mas é um pouco diferente. Será que é pela mudança
de vesão do Vue? nessa aula, o prof ainda usa o 2
53 - usando a propriedade template do objeto Vue para carregar um template.
obs.: não é tão interessante fazer dessa forma, mas foi útil pq aprendi que usar crase ao invés de aspas serve tambem para preservar as quebras de linha
54 - só um recado antes da att para o vue 3
55 - Instalando Vue sem cli.
obs.: aqui que ele fala das mudanças na instanciação do objetov vue, e é assim que é feito la no persona
56 - apenas intro da proxima seção
57 - instalando node e npm no windows
58 - instalando node e npm no linux
59 - instalando node e npm no osx
60 - instalando vue cli
61 - usando vue cli para criar um projeto vue padrão
62 - usando vue cli para criar um projeto vue customizado
63 - Definindo a porta em que a aplicação será servida
64 - Criando projeto vue usando vue ui.
65 - gerenciando o projeto usando o ui
Obs.: Bem legal, essa aula. Prrincipalmente a aba de tarefas, do ui, que mostra as dependencias instaladas e as estatisticas do projeto.
66 - Entendendo a estrutura de pastas do projeto vue.
obs.: tag noscript é utilizada quando o navegador não tem suporte ao javascript, ou esse suporte está desligado
67 - Entendendo a estrutura de pastas do projeto vue. parte 2
obs.: aula boa para entender a melhor a diferença entre o package.json e o package-lock.json
68 - entendendo a diferença entre ~ e ^ na definição da versão de cada pacote no package.json
69 - como reconstruir as dependencias do projeto usando o npm (se precisar excluir o node_modules, por exemplo)
obs.: npm install le o package-lock e faz download das dependencias
70 - instalando git no windows
71 - instalando git no linux
72 - instalando git no osx
73 - diferenciando git, github e bitbucket
74 - configs globais do git
obs.: ensina a começar um repo git localmente
75 - criando conta no bitbucket
76 - conectando repositorio local com o remoto no bitbucket
77 - trabalhando com alterações no git (status, add, reset, commit e log)
78 - git push
79 - git clone
80 - criando conta de usuário no Heroku
81 - criando um app no Heroku
82 - Instalando heroku cli no windows
83 - Instalando heroku cli no linux
84 - Instalando heroku cli no osx
85 - Instalando o Express (Framework backend para o Node)
obs.: tem que criar uma camada backend para servir a aplicação frontend la no heroku. Isso acontece em toda cloud?
86 - Criando um servidor web utilizando node e express.
87 - Servindo o app vue de produção por meio do express. Basicamente fazendo a versão de prod do app
88 - configurando um comandono package.json para iniciar o servidor web
89 - conectando o projeto local ao repositório no heroku
90 - Falando de ci/cd 
obs.: eu posso subir a aplicação diretamente no heriku. Não preciso colocar no github ou bitbucket. Inclusive o Heroku tem
suporte a pipeline de deploy
91 - Fazendo o deploy, de fato, no Heroku (muito legal essa aula)
92 - instalando o Vue Devtools
93 - instalando plugins no Vue, via cli
94 - variaveis de ambiente (criando um .env) e como acessa-las
95 - variáveis de ambiente e modos de build parte 1
96 - variáveis de ambiente e modos de build parte 2
obs.: da pra fazer vaios .env customizados para cada build (dev, prod, build customizada, etc...)
97 - ESLint parte 1
obs.: configurar o eslint direto no projeto, no package.json, ao invés da IDE. o linter impede o código de compilar,
se a regra não for seguida. Muito legal
98 - ESLint parte 2
obs.: aqui ele fala de correção automática
99 - Customizando o webpack. (conjunto de pacotes estáticos que é responsável por buildar a aplicação)
100 - Introdução a proxima seção. criando aplicações desktop
101 - Iniciando projeto com Electron Builder (aplicações desktop)
102 - rodando o app desktop.
103 - iniciando o novo projeto (vagas-front) pra estudar componentes
104 - Single File Component ou Single File Template SFC ou SFT. Fazendo o esquelto de um componente básico
105 - Criando novos componentes do layout basico
106 - Definindo nomes personalizados para o componente.
obs.: nome diferente do que está definido no arquivo.
obs.: nessa aula ele cita o export default do componente. Vi no persona que, aparentemente, usa o export default quando
não é <script setup>. Ainda não sei porque, nem sei se isso é uma regra. Tenho que pesquisar. Por enquanto vou só seguir o curso. Depois volto nessas dúvidas
107 - Seletores do componente e kebab-case
obs.: posso selecionar o componente usando PascalCase e chamar ele no template usando kebab-case. Ou manter o PascalCase, tambem.
108 - Adicionando bootstrap ao projeto e criando a primeira versão da navbar
obs.: depois eu queria fazer um ds pra esse projeto.
109 - Criando componentes adicionais Home e PublicarVagas
obs.: percebi que o componente Conteudo estava sendo renderizado no app.vue mesmo sem colocar o export default. como isso funciona?
Resposta: Não funciona. Tive que colocar, pra ele entender que é um componente.
110 - usando style scoped para os estilo se manter somente dentro do escopo do componente
obs.: o estilo é importado para o html compilado na ordem de hierarquia da compilação App -> Conteudo -> Home,
então o estilo de home é prevalecido pq está por ultimo no documento.
O scoped cria um hash de identificação para os elementos do componente. O que os diferencia dos demais. Algo como [data-v-239528745]
111 - Mantendo o estilo do componente restrito ao componente, agora com <style module>
obs.: quando trabalhamos com atributo module no style, todos os seletores css definidos pela notação de class e id são carregados para uma propriedade
da instancia do componente chamada $style. Através do acesso a essa propriedade, conseguimos recuperar esses estilos e usa-los no template
obs.: faz o estilo que está sendo aplicado nas tags (h1, p, div, etc...), se perder. Considera apenas classes e ids
112 - importando componentes usando o alias @
obs.: usando o @, o webpack sabe que você está apontando para o diretório 'src'.
Mas na feedz, ele não funciona assim. Será que tem como customizar o @ ou lá foi implementado errado? Verifiquei o fdz-celebration-page
113 - Lifecycle Hooks - ciclo de vida dos componentes.
obs.: nessa aula ele só mostra vários hooks. Na próxima, vai entrar nos detalhes.
Ele define os métodos com o nome direto. Sem o prefixo "on", mas a doc coloca o prefixo. Aparentemente funciona. Preciso confirmar isso.
obs.: acabei de descobrir que o curso só usa options api.
114 - ciclo de vida do componente. - criação e montagem
obs.: anotações dessa aula estão em anotacoesLifeCycleHooks.txt
115 - ciclo de vida do componente.  - atualização e desmontagem
obs.: anotações dessa aula estão em anotacoesLifeCycleHooks.txt
116 - Renderização dinâmica de componentes. tag <component>
117 - Lifecycle Hooks ativação e desativação de componentes activated() e deactivated()
obs.: aqui ele mostra um bom exemplo do beforeUnmount e unmounted funcionando.
obs.: usar o activated e o deactivated é mais performático do que montar, desmontar e remontar, mas aí tem que usar a tag <keep-alive> junto
que mantem tudo dentro dela com a instancia preservada
118 - Implementando o componente Home
119 - Componente Pesquisar Vaga
120 - Componente indicador
121 - Comunicação entre componente pai e filho (primeira aula de props)
122 - Estilo visual computado
123 - props são reativas
obs.: a diferenças entre passar um método com ou sem parenteses, é que sem parenteses é a referencia dele, e com parentes, é o resultado dele
124 - Criando componente vagas
125 - Ainda no componente vagas (agora sim passando props)
126 - Nomeação de propriedades
127 - Tipagem de props
obs.: é dessa forma que é mais usado na feedz
128 - Validação das props (required e validator)
obs.: validator retorna true ou false para dizer se o valor da prop passada é válido. Se for inválido, ele vai mostrar um warning no navegador.
obs.: Ficar atento ao ciclo de vida do componente. As props são injetadas antes da criação do componente, então aqui da pra fazer validação com elas,
mas não da pra usar as propriedades da instancia do componente ("data:" por exemplo). (olhar anotação do ciclo de vida)
129 - Valor default da prop
obs.: dá pra usar o default() assim, como método.
130 - Enviando objeto inteiro via prop, com o v-bind.
obs.: não tem como usar a forma abreviada. tem que digitar v-bind
131 - Só html do componente PublicarVagas
132 - Persistindo a vaga no LocalStorage
obs.: localStorage é nativo do javascript. Na hora de passar chave e valor para ele, são duas strings. A chave pode ser o nome do objeto,
que aqui foi "vaga", o o valor, como nós estamos falando de um objeto, passamos a versão stringficada de um json, se não, o que o localstorage
recebe é só uma descrição do objeto.
133 - Armazenando multiplos registros de vaga no localstorage
134 - Exibindo vagas que estavam no localStorage
135 - propriedades computadas para modalidade e tipo
136 - Passando a data de publicação no cadastro da vaga
137 - Formatando a data no front.
obs.: Aqui o prof complicou demais. Minha implementação foi bem mais simples
